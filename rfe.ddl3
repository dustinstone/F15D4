DROP SEQUENCE Approvers_RFEs_seq ; 
create sequence Approvers_RFEs_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Approvers_RFEs_PK_trig 
before insert on Approvers_RFEs
for each row 
begin 
select Approvers_RFEs_seq.nextval into :new.approver_rfe_id from dual; 
end; 
/
alter table Approvers_RFEs add created date ; 
alter table Approvers_RFEs add created_by VARCHAR2 (255) ; 
alter table Approvers_RFEs add row_version_number integer ; 
alter table Approvers_RFEs add updated date ; 
alter table Approvers_RFEs add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Approvers_RFEs_AUD_trig 
before insert or update on Approvers_RFEs 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Contacts_RFEs_seq ; 
create sequence Contacts_RFEs_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Contacts_RFEs_PK_trig 
before insert on Contacts_RFEs
for each row 
begin 
select Contacts_RFEs_seq.nextval into :new.contact_id from dual; 
end; 
/
alter table Contacts_RFEs add created date ; 
alter table Contacts_RFEs add created_by VARCHAR2 (255) ; 
alter table Contacts_RFEs add row_version_number integer ; 
alter table Contacts_RFEs add updated date ; 
alter table Contacts_RFEs add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Contacts_RFEs_AUD_trig 
before insert or update on Contacts_RFEs 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_Auth_seq ; 
create sequence F15D4_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_Auth_PK_trig 
before insert on F15D4_Auth
for each row 
begin 
select F15D4_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15D4_Auth add created date ; 
alter table F15D4_Auth add created_by VARCHAR2 (255) ; 
alter table F15D4_Auth add row_version_number integer ; 
alter table F15D4_Auth add updated date ; 
alter table F15D4_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_Auth_AUD_trig 
before insert or update on F15D4_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_Comment_seq ; 
create sequence F15D4_Comment_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_Comment_PK_trig 
before insert on F15D4_Comment
for each row 
begin 
select F15D4_Comment_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15D4_Comment add created date ; 
alter table F15D4_Comment add created_by VARCHAR2 (255) ; 
alter table F15D4_Comment add row_version_number integer ; 
alter table F15D4_Comment add updated date ; 
alter table F15D4_Comment add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_Comment_AUD_trig 
before insert or update on F15D4_Comment 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_Document_seq ; 
create sequence F15D4_Document_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_Document_PK_trig 
before insert on F15D4_Document
for each row 
begin 
select F15D4_Document_seq.nextval into :new.document_id from dual; 
end; 
/
alter table F15D4_Document add created date ; 
alter table F15D4_Document add created_by VARCHAR2 (255) ; 
alter table F15D4_Document add row_version_number integer ; 
alter table F15D4_Document add updated date ; 
alter table F15D4_Document add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_Document_AUD_trig 
before insert or update on F15D4_Document 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_Employee_seq ; 
create sequence F15D4_Employee_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_Employee_PK_trig 
before insert on F15D4_Employee
for each row 
begin 
select F15D4_Employee_seq.nextval into :new.employee_id from dual; 
end; 
/
alter table F15D4_Employee add created date ; 
alter table F15D4_Employee add created_by VARCHAR2 (255) ; 
alter table F15D4_Employee add row_version_number integer ; 
alter table F15D4_Employee add updated date ; 
alter table F15D4_Employee add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_Employee_AUD_trig 
before insert or update on F15D4_Employee 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_Lab_seq ; 
create sequence F15D4_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_Lab_PK_trig 
before insert on F15D4_Lab
for each row 
begin 
select F15D4_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15D4_Lab add created date ; 
alter table F15D4_Lab add created_by VARCHAR2 (255) ; 
alter table F15D4_Lab add row_version_number integer ; 
alter table F15D4_Lab add updated date ; 
alter table F15D4_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_Lab_AUD_trig 
before insert or update on F15D4_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_RFE_seq ; 
create sequence F15D4_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_RFE_PK_trig 
before insert on F15D4_RFE
for each row 
begin 
select F15D4_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15D4_RFE add created date ; 
alter table F15D4_RFE add created_by VARCHAR2 (255) ; 
alter table F15D4_RFE add row_version_number integer ; 
alter table F15D4_RFE add updated date ; 
alter table F15D4_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_RFE_AUD_trig 
before insert or update on F15D4_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_RFE_Approval_seq ; 
create sequence F15D4_RFE_Approval_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_RFE_Approval_PK_trig 
before insert on F15D4_RFE_Approval
for each row 
begin 
select F15D4_RFE_Approval_seq.nextval into :new.approval_id from dual; 
end; 
/
alter table F15D4_RFE_Approval add created date ; 
alter table F15D4_RFE_Approval add created_by VARCHAR2 (255) ; 
alter table F15D4_RFE_Approval add row_version_number integer ; 
alter table F15D4_RFE_Approval add updated date ; 
alter table F15D4_RFE_Approval add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_RFE_Approval_AUD_trig 
before insert or update on F15D4_RFE_Approval 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_RFE_Task_seq ; 
create sequence F15D4_RFE_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_RFE_Task_PK_trig 
before insert on F15D4_RFE_Task
for each row 
begin 
select F15D4_RFE_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15D4_RFE_Task add created date ; 
alter table F15D4_RFE_Task add created_by VARCHAR2 (255) ; 
alter table F15D4_RFE_Task add row_version_number integer ; 
alter table F15D4_RFE_Task add updated date ; 
alter table F15D4_RFE_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_RFE_Task_AUD_trig 
before insert or update on F15D4_RFE_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15D4_StatusHistory_seq ; 
create sequence F15D4_StatusHistory_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15D4_StatusHistory_PK_trig 
before insert on F15D4_StatusHistory
for each row 
begin 
select F15D4_StatusHistory_seq.nextval into :new.status_history_id from dual; 
end; 
/
alter table F15D4_StatusHistory add created date ; 
alter table F15D4_StatusHistory add created_by VARCHAR2 (255) ; 
alter table F15D4_StatusHistory add row_version_number integer ; 
alter table F15D4_StatusHistory add updated date ; 
alter table F15D4_StatusHistory add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15D4_StatusHistory_AUD_trig 
before insert or update on F15D4_StatusHistory 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE RFEs_Tasks_seq ; 
create sequence RFEs_Tasks_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger RFEs_Tasks_PK_trig 
before insert on RFEs_Tasks
for each row 
begin 
select RFEs_Tasks_seq.nextval into :new.rfe_task_id from dual; 
end; 
/
alter table RFEs_Tasks add created date ; 
alter table RFEs_Tasks add created_by VARCHAR2 (255) ; 
alter table RFEs_Tasks add row_version_number integer ; 
alter table RFEs_Tasks add updated date ; 
alter table RFEs_Tasks add updated_by VARCHAR2 (255) ; 
/
create or replace trigger RFEs_Tasks_AUD_trig 
before insert or update on RFEs_Tasks 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX auth_id_FK_0 ;
CREATE INDEX auth_id_FK_0 ON F15D4_Employee(auth_id) ;
DROP INDEX employee_id_FK_1 ;
CREATE INDEX employee_id_FK_1 ON F15D4_Comment(employee_id) ;
DROP INDEX employee_id_FK_2 ;
CREATE INDEX employee_id_FK_2 ON F15D4_StatusHistory(employee_id) ;
DROP INDEX employee_id_FK_3 ;
CREATE INDEX employee_id_FK_3 ON F15D4_RFE(employee_id) ;
DROP INDEX lab_id_FK_4 ;
CREATE INDEX lab_id_FK_4 ON F15D4_Employee(lab_id) ;
DROP INDEX lab_id_FK_5 ;
CREATE INDEX lab_id_FK_5 ON F15D4_RFE(lab_id) ;
DROP INDEX lab_id_FK_6 ;
CREATE INDEX lab_id_FK_6 ON F15D4_RFE_Approval(lab_id) ;
DROP INDEX rfe_id_FK_7 ;
CREATE INDEX rfe_id_FK_7 ON F15D4_Comment(rfe_id) ;
DROP INDEX rfe_id_FK_8 ;
CREATE INDEX rfe_id_FK_8 ON F15D4_StatusHistory(rfe_id) ;
DROP INDEX rfe_id_FK_9 ;
CREATE INDEX rfe_id_FK_9 ON F15D4_Document(rfe_id) ;
DROP INDEX rfe_id_FK_10 ;
CREATE INDEX rfe_id_FK_10 ON F15D4_RFE_Approval(rfe_id) ;
DROP INDEX status_history_id_FK_11 ;
CREATE INDEX status_history_id_FK_11 ON F15D4_RFE(status_history_id) ;
DROP INDEX employee_id_FK_12 ;
CREATE INDEX employee_id_FK_12 ON Approvers_RFEs(employee_id) ;
DROP INDEX rfe_id_FK_13 ;
CREATE INDEX rfe_id_FK_13 ON RFEs_Tasks(rfe_id) ;
DROP INDEX task_id_FK_14 ;
CREATE INDEX task_id_FK_14 ON RFEs_Tasks(task_id) ;
DROP INDEX rfe_id_FK_15 ;
CREATE INDEX rfe_id_FK_15 ON Approvers_RFEs(rfe_id) ;
DROP INDEX employee_id_FK_16 ;
CREATE INDEX employee_id_FK_16 ON Contacts_RFEs(employee_id) ;
DROP INDEX rfe_id_FK_17 ;
CREATE INDEX rfe_id_FK_17 ON Contacts_RFEs(rfe_id) ;
